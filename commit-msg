#!/usr/bin/env nu

let allowedTypes = [
  'feat',
  'fix',
  'docs',
  'style',
  'refactor',
  'perf',
  'test',
  'chore',
  'wip',
  "ci",
  "build",
  "misc",
  "revert",
  "workaround",
  'BREAKING CHANGE'
]

let scopeMatch = '(?:[A-Za-z0-9_,-]+)'


let semRegex = [ '^(?:', ($allowedTypes | str join '|'), ')(?:\((?:' $scopeMatch ', ?)*', $scopeMatch, '\))?:\s\w+' ]
    | str join ''

let automods = (^git config --default true --get semantic-commit.auto-modules) == "true"

def checkSem [ commitMsg: string ] {
  if $commitMsg =~ $semRegex {
    return
  }
  print -e $"Your commit title did not follow semantic versioning: ($commitMsg)"
  exit 1
}

def main [ commitMsg: string ] {
  if $commitMsg == "" {
    print -e "Missing argument (commit message). Did you try to run this manually?"
    exit 1
  }
  let commitTitle = (open $commitMsg | lines | first)
  if $commitTitle =~ "^Merge branch \'" {
    exit 0
  }
  checkSem $commitTitle
  if $automods and $commitTitle =~ '^(?:\w+):' {
    let mods = (
      git diff --cached --name-only
      | lines
      | where $it =~ '/'
      | str replace -a -r '/.*$' ''
      | sort -n
      | uniq
      | str join ','
    )
    if $mods == "" {
      exit 0
    }
    let tmpfile = (mktemp)
    let replace = [ '(', $mods, ')' ] | str join
    let split = ($commitTitle | split row -n 2 ':')
    let modType = ([ $split.0, $replace ] | str join '')
    let newCommitTitle = ([ $modType, $split.1 ] | str join ':')
    $newCommitTitle | save -a $tmpfile
    open $commitMsg | lines | skip 1 | save -a $tmpfile

    mv -f $tmpfile $commitMsg
  }
}
